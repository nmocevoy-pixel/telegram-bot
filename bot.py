import os
import random
import json
import io
from datetime import datetime

# === –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ /stats ===
import matplotlib
matplotlib.use("Agg")  # –±–µ–∑ GUI ‚Äî —É–¥–æ–±–Ω–æ –Ω–∞ Windows/—Å–µ—Ä–≤–µ—Ä–µ
import matplotlib.pyplot as plt

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("BOT_TOKEN")
IMAGES_ROOT = "images"      # –æ–∂–∏–¥–∞–µ—Ç—Å—è: images/feet, images/breast, images/ass
STATS_FILE = "stats.json"   # —Ç—É—Ç –∫–æ–ø–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–µ–Ω—é
CATEGORIES = {
    "feet": "–ù–æ–∂–∫–∏ ü¶∂",
    "breast": "–ì—Ä—É–¥—å üçí",
    "ass": "–ü–æ–ø—ã üçë",
}

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: {user_id: {"index": int, "winner": str, "order": list[str], "chat_id": int, "category": str}}
user_state: dict[int, dict] = {}

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
def load_stats() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å—Ö–µ–º–µ.
       –î–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: {user_id: 3} -> {uses:3, ...}"""
    data = {}
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, "r", encoding="utf-8") as f:
                raw = json.load(f)
                if isinstance(raw, dict):
                    for uid, v in raw.items():
                        if isinstance(v, int):
                            data[uid] = {"uses": int(v), "last_seen": None, "name": None}
                        elif isinstance(v, dict):
                            data[uid] = {
                                "uses": int(v.get("uses", 0)),
                                "last_seen": v.get("last_seen"),
                                "name": v.get("name"),
                            }
                        # –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
        except Exception:
            pass
    return data

def save_stats(data: dict) -> None:
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

stats = load_stats()
# —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–±–µ–∑ –º—É—Å–æ—Ä–∞)
save_stats(stats)


# === –£–¢–ò–õ–ò–¢–´ ===
def load_photos_for_category(category: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–∫–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    folder = os.path.join(IMAGES_ROOT, category)
    if not os.path.isdir(folder):
        return []
    return [
        os.path.join(folder, f)
        for f in os.listdir(folder)
        if f.lower().endswith((".jpg", ".jpeg", ".png"))
    ]

def main_menu_keyboard() -> InlineKeyboardMarkup:
    rows = [[
        InlineKeyboardButton(CATEGORIES["feet"],   callback_data="category:feet"),
        InlineKeyboardButton(CATEGORIES["breast"], callback_data="category:breast"),
        InlineKeyboardButton(CATEGORIES["ass"],    callback_data="category:ass"),
    ]]
    return InlineKeyboardMarkup(rows)


# === –•–≠–ù–î–õ–ï–†–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    user_id = user.id
    user_id_str = str(user_id)
    display_name = user.full_name or (user.username and f"@{user.username}") or user_id_str

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–±–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è ‚Äî –º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ –º–µ—Å—Ç—É)
    entry = stats.get(user_id_str, {"uses": 0, "last_seen": None, "name": None})
    entry["uses"] = int(entry.get("uses", 0)) + 1
    entry["last_seen"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if not entry.get("name"):
        entry["name"] = display_name
    stats[user_id_str] = entry
    save_stats(stats)

    text = (
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ:\n\n"
        f"{CATEGORIES['feet']}  |  {CATEGORIES['breast']}  |  {CATEGORIES['ass']}\n\n"
        "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫—Ä–æ–π –º–µ–Ω—é ‚Äî –∫–æ–º–∞–Ω–¥–∞ /menu"
    )
    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=main_menu_keyboard())


async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu_keyboard())


async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö—Ä–∞—Å–∏–≤—ã–π /stats: —Ç–µ–∫—Å—Ç + –±–∞—Ä-–¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ç–æ–ø-20 –ø–æ –∑–∞–ø—É—Å–∫–∞–º)."""
    if not stats:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–∞–∂–µ –ø—Ä–∏ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
    def _uses(v):
        try:
            return int(v.get("uses", 0)) if isinstance(v, dict) else int(v)
        except Exception:
            return 0

    total_users = len(stats)
    total_uses = sum(_uses(v) for v in stats.values())

    # –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ uses –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    sorted_items = sorted(
        stats.items(),
        key=lambda kv: _uses(kv[1]),
        reverse=True
    )

    # —Ç–µ–∫—Å—Ç ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ç–æ–ø-50
    lines = []
    for uid, s in sorted_items[:50]:
        if isinstance(s, dict):
            name = s.get("name") or uid
            uses = _uses(s)
            last_seen = s.get("last_seen", "‚Äî")
        else:
            name = uid
            uses = _uses(s)
            last_seen = "‚Äî"
        lines.append(f"‚Ä¢ {name} ‚Äî {uses} –∑–∞–ø—É—Å–∫(–æ–≤), –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {last_seen}")

    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–æ–≤ –≤—Å–µ–≥–æ: <b>{total_uses}</b>\n\n"
        + ("\n".join(lines) if lines else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ")
    )
    await update.message.reply_text(text, parse_mode="HTML")

    # –≥—Ä–∞—Ñ–∏–∫ ‚Äî —Ç–æ–ø-20
    top_for_chart = sorted_items[:20]
    labels, values = [], []
    for uid, s in top_for_chart:
        if isinstance(s, dict):
            name = s.get("name") or uid
            val = _uses(s)
        else:
            name = uid
            val = _uses(s)
        label = name if len(str(name)) <= 14 else (str(name)[:12] + "‚Ä¶")
        labels.append(label)
        values.append(val)

    if any(values):
        fig, ax = plt.subplots(figsize=(10, 5), dpi=150)
        ax.bar(labels, values)
        ax.set_title("–ó–∞–ø—É—Å–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ø-20)")
        ax.set_ylabel("–ö–æ–ª-–≤–æ –∑–∞–ø—É—Å–∫–æ–≤")
        ax.set_xlabel("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        plt.setp(ax.get_xticklabels(), rotation=30, ha="right")
        plt.tight_layout()

        buf = io.BytesIO()
        fig.savefig(buf, format="png")
        plt.close(fig)
        buf.seek(0)

        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=buf,
            caption="–ì—Ä–∞—Ñ–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤ (—Ç–æ–ø-20 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)",
        )
    else:
        await update.message.reply_text("–ü–æ–∫–∞ –≥—Ä–∞—Ñ–∏–∫ –ø—É—Å—Ç ‚Äî –∑–∞–ø—É—Å–∫–æ–≤ –µ—â—ë –Ω–µ—Ç.")


async def on_category_pick(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é ¬´—Å–µ—Å—Å–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è¬ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    photos = load_photos_for_category(category)
    if len(photos) < 2:
        nice_name = CATEGORIES.get(category, category)
        await context.bot.send_message(
            chat_id=chat_id,
            text=(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {nice_name} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ. "
                  f"–ü–æ–ª–æ–∂–∏ –º–∏–Ω–∏–º—É–º 2 —Ñ–∞–π–ª–∞ (.jpg/.jpeg/.png) –≤ –ø–∞–ø–∫—É {IMAGES_ROOT}/{category} –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."),
        )
        return

    random.shuffle(photos)
    user_state[user_id] = {
        "index": 1,
        "winner": photos[0],
        "order": photos,
        "chat_id": chat_id,
        "category": category,
    }
    await send_pair(context, user_id)


async def send_pair(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—É —Ñ–æ—Ç–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ (—á–µ—Ä–µ–∑ chat_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è)."""
    state = user_state[user_id]
    chat_id = state["chat_id"]
    current_index = state["index"]
    order = state["order"]

    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if current_index >= len(order):
        with open(state["winner"], "rb") as f:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=f,
                caption=f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CATEGORIES.get(state['category'], state['category'])}!",
            )
        del user_state[user_id]
        # –ø—Ä–µ–¥–ª–æ–∂–∏–º –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await context.bot.send_message(chat_id=chat_id, text="–•–æ—á–µ—à—å –µ—â—ë —Ä–∞—É–Ω–¥? –í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu_keyboard())
        return

    winner_photo = state["winner"]
    next_photo = order[current_index]

    keyboard = [[
        InlineKeyboardButton("–§–æ—Ç–æ 1 ‚ù§Ô∏è", callback_data="pick:1"),
        InlineKeyboardButton("–§–æ—Ç–æ 2 üíô", callback_data="pick:2"),
    ]]
    markup = InlineKeyboardMarkup(keyboard)

    # —Å–Ω–∞—á–∞–ª–∞ –∞–ª—å–±–æ–º, –ø–æ—Ç–æ–º –∫–Ω–æ–ø–∫–∏
    with open(winner_photo, "rb") as f1, open(next_photo, "rb") as f2:
        media = [
            InputMediaPhoto(f1, caption="–§–æ—Ç–æ 1 ‚ù§Ô∏è"),
            InputMediaPhoto(f2, caption="–§–æ—Ç–æ 2 üíô"),
        ]
        await context.bot.send_media_group(chat_id=chat_id, media=media)

    await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–µ —Ç–µ–±–µ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è üëá", reply_markup=markup)


async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    await query.answer()

    # –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data.startswith("category:"):
        category = data.split(":", 1)[1]
        await on_category_pick(update, context, category)
        return

    # –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (1/2)
    if data.startswith("pick:"):
        state = user_state.get(user_id)
        if not state:
            await query.message.reply_text("–°–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ù–∞–∂–º–∏ /menu.")
            return

        order = state["order"]
        current_index = state["index"]
        next_photo = order[current_index]

        winner = state["winner"] if data == "pick:1" else next_photo
        state["winner"] = winner
        state["index"] += 1

        await query.message.reply_text("‚úÖ –û–∫–µ–π, –∏–¥—ë–º –¥–∞–ª—å—à–µ!")
        await send_pair(context, user_id)
        return

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–ª–±—ç–∫
    await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏ /menu.")


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    import asyncio

    # –Ø–í–ù–û —Å–æ–∑–¥–∞—ë–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    app = ApplicationBuilder().token(TOKEN).build()

    # —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu",  menu_cmd))
    app.add_handler(CommandHandler("stats", stats_cmd))
    app.add_handler(CallbackQueryHandler(on_button))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤! PID:", os.getpid())

    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö policy/close_loop
    app.run_polling()
